#!/usr/bin/perl
# -*- cperl -*-
package AptUpchk::Report::SingleHost;

use strict;
use warnings;
use XML::DOM;
use XML::XQL;
use XML::XQL::DOM;
use IO::File;

sub new {
    my $class = shift;
    my $self;
    if (@_ == 1) {
	$self = { doc => shift };
    } else {
	$self = { @_ };
    }
    unless (exists $self->{output}) {
	$self->{output} = IO::File->new(">-");
    }
    bless $self, $class;
}

sub _scan_updates {
    my $self = shift;
    my (@security, @update);
    my ($pkg);
    foreach $pkg ( $self->{doc}->xql("/apt-upchk-report/updatepkg") ) {
	if ( [__get_first_data($pkg->xql("./release"))]->[0] =~ /-security:/i ) {
	    push @security, $pkg;
	} else {
	    push @update, $pkg;
	}
    }
    $self->{pkg} = {} unless exists $self->{pkg};
    $self->{pkg}->{security} = [@security];
    $self->{pkg}->{update} = [@update];
    $self;
}

sub _get_hold_pkg {
    my $self = shift;
    unless (exists $self->{pkg}->{hold}) {
	$self->{pkg}->{hold} = [$self->{doc}->xql("/apt-upchk-report/keptbackpkg")];
    }
    @{$self->{pkg}->{hold}};
}

sub _get_update_pkg {
    my $self = shift;
    $self->_scan_updates unless exists $self->{pkg}->{update};
    @{$self->{pkg}->{update}};
}

sub _get_security_pkg {
    my $self = shift;
    $self->_scan_updates unless exists $self->{pkg}->{security};
    @{$self->{pkg}->{security}};
}

sub _get_update_exitcode {
    my $self = shift;
    [__get_first_data($self->{doc}->xql("/apt-upchk-report/update-command/exitcode"))]->[0];
}

sub _get_update_output {
    my $self = shift;
    [__get_first_data($self->{doc}->xql("/apt-upchk-report/update-command/output"))]->[0];
}

sub report {
    my $self = shift;
    $self->report_update_err   and $self->_msg("\n");
    $self->report_security_pkg and $self->_msg("\n");
    $self->report_update_pkg   and $self->_msg("\n");
    $self->report_hold_pkg     and $self->_msg("\n");
}

sub report_update_err {
    my $self = shift;
    my $err;
    if ( ($err = $self->_get_update_exitcode) != 0 ) {
	$self->_msg("Warning: apt-get update exited with error($err);\n");
	$self->_msg($self->_get_update_output);
	1;
    } else {
	0;
    }
}

sub report_security_pkg {
    my $self = shift;
    my @pkgs = $self->_get_security_pkg or return 0;
    $self->_msg("== SECURITY UPDATES ==\n");
    foreach my $pkg ( @pkgs ) {
	$self->_msg(&__uppkg_fmt($pkg));
    }
    return 1;
}

sub report_update_pkg {
    my $self = shift;
    my @pkgs = $self->_get_update_pkg or return 0;
    $self->_msg("== Update Packages ==\n");
    foreach my $pkg ( @pkgs ) {
	$self->_msg(&__uppkg_fmt($pkg));
    }
    return 1;
}

sub report_hold_pkg {
    my $self = shift;
    my @pkgs = $self->_get_hold_pkg or return 0;
    $self->_msg("== holds ageinst update ==\n");
    foreach my $pkg ( @pkgs ) {
	$self->_msg(&__holdpkg_fmt($pkg));
    }
    return 1;
}

sub _msg {
    my $self = shift;
    my $fh = $self->{output};
    print $fh @_;
}

###

sub __get_first_data {
    map { $_->getFirstChild->getData } @_;
}


sub __secpkg_fmt($) {
    my $p = shift;
    sprintf("%-22s %15s => %15s\n",
	    __get_first_data($p->xql("./name"),
			     $p->xql("./current-version"),
			     $p->xql("./new-version")));
}

sub __uppkg_fmt($) {
    my $p = shift;
    sprintf("%-22s %15s => %15s\n",
	    __get_first_data($p->xql("./name"),
			     $p->xql("./current-version"),
			     $p->xql("./new-version")));

}

sub __holdpkg_fmt($) {
    my $p = shift;
    sprintf("%s (%s)\n",
	    __get_first_data($p->xql("./name"),
			     $p->xql("./current-version")));
}

######################
package main;

if (__FILE__ eq $0) {
    use strict;
    use warnings;
    use XML::DOM;
    my $dom = XML::DOM::Parser->new->parse(*STDIN);
    my $rep = AptUpchk::Report::SingleHost->new($dom);
    my $exitcode = 0;

    my %opt = (config => @ARGV && $ARGV[0] || "/etc/apt-upchk/report.conf",
	       "repot-update-pkg" => 1, "report-hold-pkg" => 1,
	       "report-security-pkg" => 1, "repot-update-error" => 1);
    if ( -r $opt{config} ) {
	do $opt{config};
	die "Error in config file: $@\n" if $@;
    }

    #$rep->{output} = IO::File->new(">out");

    $opt{"repot-update-error"}
	and $rep->report_update_err
	    and $exitcode = 100
		and print "\n";

    $opt{"repot-update-pkg"}
	and $rep->report_security_pkg
	    and $exitcode = 100
		and print "\n";
    $opt{"repot-update-pkg"}
	and $rep->report_update_pkg
	    and $exitcode = 100
		and	print "\n";
    $opt{"repot-update-pkg"}
	and $rep->report_hold_pkg
	    and $exitcode = 100
		and print "\n";

    exit($exitcode);
}

1;
