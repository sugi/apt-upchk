#!/usr/bin/perl
package AptUpchk::Report::SingleHost;

use strict;
use warnings;
use XML::DOM;
use XML::XQL;
use XML::XQL::DOM;
#use Data::Dumper;

sub new {
    my $class = shift;
    my $self  = { doc => shift };
    bless $self, $class;
}

sub _scan_updates {
    my $self = shift;
    my (@security, @update);
    my ($pkg);
    foreach $pkg ( $self->{doc}->xql("/apt-upchk-report/updatepkg") ) {
	if ( [__get_first_data($pkg->xql("./release"))]->[0] =~ /-security:/i ) {
	    push @security, $pkg;
	} else {
	    push @update, $pkg;
	}
    }
    $self->{pkg} = {} unless exists $self->{pkg};
    $self->{pkg}->{security} = [@security];
    $self->{pkg}->{update} = [@update];
    $self;
}

sub _get_hold_pkg {
    my $self = shift;
    unless (exists $self->{pkg}->{hold}) {
	$self->{pkg}->{hold} = [$self->{doc}->xql("/apt-upchk-report/keptbackpkg")];
    }
    @{$self->{pkg}->{hold}};
}

sub _get_update_pkg {
    my $self = shift;
    $self->_scan_updates unless exists $self->{pkg}->{update};
    @{$self->{pkg}->{update}};
}

sub _get_security_pkg {
    my $self = shift;
    $self->_scan_updates unless exists $self->{pkg}->{security};
    @{$self->{pkg}->{security}};
}

sub report {
    my $self = shift;
    $self->report_security and print "\n";
    $self->report_update   and print "\n";
    $self->report_hold     and print "\n";
}

sub report_security {
    my $self = shift;
    my @pkgs = $self->_get_security_pkg or return 0;
    print "== SECURITY UPDATES ==\n";
    foreach my $pkg ( @pkgs ) {
	print &__uppkg_fmt($pkg);
    }
    return 1;
}

sub report_update {
    my $self = shift;
    my @pkgs = $self->_get_update_pkg or return 0;
    print "== Update Packages ==\n";
    foreach my $pkg ( @pkgs ) {
	print &__uppkg_fmt($pkg);
    }
    return 1;
}

sub report_hold {
    my $self = shift;
    my @pkgs = $self->_get_hold_pkg or return 0;
    print "== holds ageinst update ==\n";
    foreach my $pkg ( @pkgs ) {
	print &__holdpkg_fmt($pkg);
    }
    return 1;
}


###

sub __get_first_data {
    map { $_->getFirstChild->getData } @_;
}


sub __secpkg_fmt($) {
    my $p = shift;
    sprintf("%-22s %15s => %15s\n",
	    __get_first_data($p->xql("./name"),
			     $p->xql("./current-version"),
			     $p->xql("./new-version")));
}

sub __uppkg_fmt($) {
    my $p = shift;
    sprintf("%-22s %15s => %15s\n",
	    __get_first_data($p->xql("./name"),
			     $p->xql("./current-version"),
			     $p->xql("./new-version")));

}

sub __holdpkg_fmt($) {
    my $p = shift;
    sprintf("%s (%s)\n",
	    __get_first_data($p->xql("./name"),
			     $p->xql("./current-version")));
}

######################
package main;

if (__FILE__ eq $0) {
    use strict;
    use warnings;
    use XML::DOM;
    my $dom = XML::DOM::Parser->new->parse(*STDIN);
    my $rep = AptUpchk::Report::SingleHost->new($dom);
    $rep->report;
}
