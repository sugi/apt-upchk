#!/usr/bin/perl
# -*- cperl -*-

#
# simple apt update checker.
#
# author: Tatsuki Sugiura <sugi@nemui.org>
# license: GPL
#

use strict;
use warnings;
use lib '/usr/share/apt-upchk/lib';
use AptUpchk;
use Getopt::Long;
Getopt::Long::Configure("gnu_getopt");
use Sys::Hostname;
use IO::File;
use Data::Dumper;

my $statfh = undef;
my $exitcode = 0;

$ENV{LANG} = "C";
$ENV{LC_ALL} = "C";

our %opt = ( config     => "/etc/apt-upchk/upchk.conf",
	    "no-update" => 0,
	    "no-cache"  => 0,
	     format     => "perl",
	     cache_time => 600, # cache lifetime, default = 10min.
	     cache      => "/var/lib/apt-upchk/cache/upchk.pl",
	     workroot   => "/var/lib/apt-upchk/workroot",
	    "apt-get"   => "/usr/share/apt-upchk/scripts/apt-simulate",
	   );

if ( -r $opt{config} ) {
    do $opt{config};
    die "Error in config file: $@\n" if $@;
}

my %cmdopt;
GetOptions(\%cmdopt,
	   "no-update|n",
	   "no-cache|N",
	   "apt-get=s",
	   "format|f=s",
	   ) or die "\n";

foreach my $o (keys %cmdopt) {
    $opt{$o} = $cmdopt{$o};
}

unless ( -x $opt{"apt-get"} ) {
    die "Can't exec apt-get($opt{'apt-get'}): $!\n";
}

my $out = {};

if ( !$opt{"no-cache"} && -f $opt{cache} &&
     time() < ($opt{cache_time} + (stat($opt{cache}))[9]) ){
    my $ch = IO::File->new($opt{cache}) or die "can't read cache file";
    my @cache = <$ch>;
    $ch->close;
    eval "@cache";

} else {

    my $update_out = "";
    my $update_ret = 0;
    unless ( $opt{"no-update"} ) {
	$update_out = `$opt{"apt-get"} -qq update 2>&1`;
	$update_ret = $? >> 8;
    }
    my @upgrade_out = split(/\n/, `$opt{"apt-get"} -u -s upgrade 2>&1`);
    my $upgrade_ret = $?;

    # stack data
    $out->{version}  = $AptUpchk::VERSION;
    $out->{hostname} = hostname();
    $out->{unixtime} = time();
    $out->{"update-command"} = { exitcode => $update_ret,
				 output => $update_out };

    # scan output
    {
	my $kept_p = 0;
	my $kept_lines = "";
	foreach ( @upgrade_out ) {
	    if ($kept_p) {
		if (/^\s/) {
		    $kept_lines .= " $_ ";
		} else {
		    $kept_p = 0;
		}
	    }
	    elsif (/^The following packages have been kept back/){
		$kept_p = 1;
		$out->{keptbackpkg} = [];
	    }
	}
	foreach (split /\s+/, $kept_lines) {
	    $_ eq "" and next;
	    my $pstat = &get_new_pkg_stat($_);
	    push @{$out->{keptbackpkg}},
		{ name => $_,
		 "current-version" => &get_installed_ver($_),
		 "new-version" => $pstat->{"new-version"},
		  release => $pstat->{release},
		};
	}
    }

    my @packages = grep(/^Inst /i, @upgrade_out);
    $out->{updatepkg} = [] if (@packages);
    foreach (@packages) {
	if ( /^Inst (\S+)\s+(?:\[(.*?)\])?\s*\((\S+)(?:\s+(.+?))?\)/ ) {
	    push @{$out->{updatepkg}},
		{ name => $1,
		 "current-version" => $2 || &get_installed_ver($1),
		 "new-version" => $3,
		  release => $4,
		};
	} else {
	    warn "abnormal line was detected: $_\n";
	}
    }

    open(CH, "> $opt{cache}");
    print CH Data::Dumper->Dump([$out], ["out"]);
    close CH;
}

if ($opt{format} eq "perl") {
    print Data::Dumper->Dump([$out], ["aptupchk"]);
} elsif ($opt{format} eq "yaml") {
    eval "use YAML ();";
    if ($@) { die "can't load YAML library. please install libyaml-perl." };
    print YAML::Dump($out);
} else {
    die "unknown format: '$opt{format}'\n";
}

if (defined($out->{updatepkg}) && @{$out->{updatepkg}}) {
    $exitcode = 100;
} elsif (defined($out->{keptbackpkg}) && @{$out->{keptbackpkg}}) {
    $exitcode = 50;
}
exit($exitcode);

## utils
sub get_installed_ver($) {
    my $pkg = shift;
    my $version = undef;
    unless ( $statfh ) {
	$statfh = IO::File->new("/var/lib/dpkg/status");
    }

    my ($line);
    seek($statfh, 0, 0);
  LOOP:
    while ( $line = <$statfh> ) {
	if ($line =~ /^Package:\s+${pkg}$/) {
	    while ( $line = <$statfh> ) {
		if ($line =~ /^Version:\s+(.*)$/) {
		    $version = $1;
		    last LOOP;
		} elsif ( $line eq "\n" ) {
		    last LOOP;
		}
	    }
	}
    }
    $version;
}

sub get_new_pkg_stat ($) {
    my $pkg = shift;
    my $ret = {};
    my $line = "";
    open(CHE, "apt-cache -o Dir='$opt{workroot}' showpkg $pkg|");
    $line = <CHE> while $line !~ /^Versions:/;
    $line = <CHE>;
    close(CHE);
    ($ret->{"new-version"}) = ($line =~ /^([\d.+:a-zA-Z-]+-[\d.+a-zA-Z]+))/);
    my @packages = ($line =~ /\(([^()]+)\)/g);
    foreach my $p (@packages) {
	my $r = $p;
	$r =~ s/_Packages$/_Release/;
	if ( -f $r ) {
	    my %rel;
	    my $rfh = IO::File->new($r);
	    my $rl;
	    while ($rl = <$rfh>) {
		$rl =~ /^([^:]+):\s+(.*)/;
		$rel{$1} = $2;
	    }
	    $rfh->close;
	    $ret->{release} = defined($rel{Version}) ?
		"$rel{Label}:$rel{Version}/$rel{Archive}" :
		    "$rel{Label}:$rel{Archive}";
	    last;
	}
	$p =~ m|([^/_]+)[^/]+$|;
	$ret->{release} = $1;
    }
    $ret;
}
